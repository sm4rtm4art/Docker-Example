# Security-First Dockerfile Example - For Module 6

# Multi-stage build for security and size
FROM python:3.12-slim AS builder

# Install build dependencies as root (necessary)
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for build
RUN useradd -m -u 1000 builduser
USER builduser
WORKDIR /home/builduser

# Install Python dependencies as non-root
COPY --chown=builduser:builduser requirements.txt .
RUN pip install --user --no-cache-dir -r requirements.txt

# Copy application code
COPY --chown=builduser:builduser . .

# Final stage - minimal runtime
FROM python:3.12-slim

# Create non-root user with specific UID/GID
# This helps with volume permissions
RUN groupadd -g 1000 appgroup && \
    useradd -r -u 1000 -g appgroup -m -s /sbin/nologin appuser

# Install only runtime dependencies (as root)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \  # for health checks
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy Python packages from builder
COPY --from=builder --chown=appuser:appgroup /home/builduser/.local /home/appuser/.local

# Set up application directory with proper permissions
RUN mkdir -p /app/uploads /app/logs && \
    chown -R appuser:appgroup /app

WORKDIR /app

# Copy application code
COPY --from=builder --chown=appuser:appgroup /home/builduser/app .

# Environment setup
ENV PATH=/home/appuser/.local/bin:$PATH \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Switch to non-root user (MANDATORY)
USER appuser

# Health check as non-root
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose non-privileged port
EXPOSE 8000

# Run as non-root with read-only root filesystem
# Note: Writable directories must be explicitly defined as volumes
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

# Security annotations
LABEL security.non-root="true" \
      security.read-only-root="true" \
      security.no-new-privileges="true"

# Volume definitions for writable areas
VOLUME ["/app/uploads", "/app/logs"]

# Example docker run with security options:
# docker run -d \
#   --name secure-app \
#   --user 1000:1000 \
#   --read-only \
#   --tmpfs /tmp \
#   --security-opt=no-new-privileges:true \
#   --cap-drop ALL \
#   --cap-add NET_BIND_SERVICE \
#   -v uploads:/app/uploads \
#   -v logs:/app/logs \
#   -p 8000:8000 \
#   secure-app:latest